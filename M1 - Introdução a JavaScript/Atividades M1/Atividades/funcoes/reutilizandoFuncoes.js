// S5-10 | üí™ Atividade: Reutilizando Fun√ß√µes

// Exerc√≠cio 1
// √â necess√°rio realizar a soma com uma fun√ß√£o e depois reutilizar esta fun√ß√£o para fazer outra opera√ß√£o matem√°tica. Siga os t√≥picos a seguir:

// Declare uma fun√ß√£o somaReutilizavel que receber√° dois par√¢metros a e b.
// Desenvolva a l√≥gica deste algoritmo para obter o resultado da soma dos dois par√¢metros.
// Ap√≥s isso e j√° fora da fun√ß√£o, declare uma vari√°vel resultado e atribua um valor 0 a ela.
// Utilizando a fun√ß√£o somaReutilizavel, voc√™ deve realizar a opera√ß√£o 10 + 10 e multiplicar por 5, armazenando o valor total na vari√°vel resultado.
// Mostre o valor da vari√°vel resultado atrav√©s do console.

const somaReutilizavel = (a, b) => {
    return a + b;
};

let resultado = 0;

resultado = somaReutilizavel(10, 10) * 5;
console.log(resultado);

// Exerc√≠cio 2
// √â necess√°rio obter o nome completo de um usu√°rio e depois selecionar apenas as letras iniciais do nome e sobrenome, e para isso √© poss√≠vel desenvolver tr√™s fun√ß√µes para a tarefa ser conclu√≠da. Siga os t√≥picos a seguir:

// Declare uma fun√ß√£o letraInicial que receber√° dois par√¢metros nome e sobrenome e retornar√° a apenas a primeira letra mai√∫scula de nome e a primeira letra mai√∫scula de sobrenome.

// Declare uma fun√ß√£o nomeCompleto que n√£o receber√° par√¢metros e retornar√° uma frase contendo as iniciais do nome e sobrenome. √â necess√°rio reutilizar a fun√ß√£o letraInicial para retornar a seguinte frase: "As letras inicias do meu nome completo s√£o -letraInicialDoNome- -letraInicialDoSobrenome-"
// Mostre a frase atrav√©s do console.

const letraInicial = (nome, sobrenome) => {
    nome = nome.toUpperCase()[0];
    sobrenome = sobrenome.toUpperCase()[0];

    return [nome, sobrenome]
};

const nomeCompleto = () => {
    const [inicialNome, inicialSobrenome] = letraInicial("italo", "kaiq");

    return `As letras inicias do meu nome completo s√£o ${inicialNome} ${inicialSobrenome}`;
};

console.log(nomeCompleto());

// Exerc√≠cio 3
// O objetivo deste exerc√≠cio √© desenvolver tr√™s fun√ß√µes para obter um resultado final. √â necess√°rio obter o n√∫mero de letras de um produto e verificar se o total de caracteres √© par ou √≠mpar. Siga os t√≥picos a seguir:

// Declare uma fun√ß√£o par que receber√° um par√¢metro n, e este par√¢metro representa um n√∫mero. Desenvolva a l√≥gica para retornar true se o n√∫mero for par ou false se n√£o for par.
// Declare uma fun√ß√£o impar que receber√° uma par√¢metro n, e este par√¢metro representa um n√∫mero. Desenvolva a l√≥gica para retornar true se o n√∫mero for √≠mpar ou false se n√£o for √≠mpar.
// Declare uma fun√ß√£o letrasProduto que receber√° um par√¢metro produto, e este produto representar√° uma string. Voc√™ dever√° obter o n√∫mero de caracteres, ou seja, o tamanho da palavra produto e reutilizando as fun√ß√µes par e impar voc√™ dever√° verificar se o tamanho √© par ou √≠mpar.
// Retorne "O n√∫mero de letras deste produto √© par" se o tamanho da palavra produto for par ou "O n√∫mero de letras deste produto √© √≠mpar" se o tamanho da palavra produto for √≠mpar.

const par = (n) => {
    return n % 2 === 0 ? true : false;
}

const impar = (n) => {
    return n % 2 !== 0 ? true : false;
}

const letrasProduto = (produto) => {
    const tamanho = produto.length;

    if (par(tamanho)) {
        return "O n√∫mero de letras deste produto √© par";
    } else if (impar(tamanho)) {
        return "O n√∫mero de letras deste produto √© √≠mpar";
    }
}